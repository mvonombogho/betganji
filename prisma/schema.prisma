generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  email         String       @unique
  name          String?
  password      String
  predictions   Prediction[]
  resetToken    ResetToken?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model ResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String   @unique
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Team {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  league        String    // e.g., "Premier League", "La Liga"
  country       String
  homeMatches   Match[]   @relation("HomeTeam")
  awayMatches   Match[]   @relation("AwayTeam")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([name, country])
}

model Match {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  homeTeamId  String       @db.ObjectId
  awayTeamId  String       @db.ObjectId
  homeTeam    Team         @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeam    Team         @relation("AwayTeam", fields: [awayTeamId], references: [id])
  datetime    DateTime
  status      MatchStatus  @default(SCHEDULED)
  homeScore   Int?
  awayScore   Int?
  odds        Odds[]
  predictions Prediction[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([datetime])
}

model Odds {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  matchId     String    @db.ObjectId
  match       Match     @relation(fields: [matchId], references: [id])
  provider    String    // e.g., "Betfair", "Bet365"
  homeWin     Float
  draw        Float
  awayWin     Float
  timestamp   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([matchId, timestamp])
}

model Prediction {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  userId       String           @db.ObjectId
  user         User             @relation(fields: [userId], references: [id])
  matchId      String           @db.ObjectId
  match        Match            @relation(fields: [matchId], references: [id])
  prediction   PredictionType
  confidence   Float            // 0 to 1
  stake        Float?
  odds         Float?
  result       PredictionResult?
  reasoning    String?
  aiSuggestion String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([userId, matchId])
  @@index([matchId, prediction])
}

enum MatchStatus {
  SCHEDULED
  IN_PLAY
  FINISHED
  CANCELLED
  POSTPONED
}

enum PredictionType {
  HOME_WIN
  DRAW
  AWAY_WIN
  OVER_2_5
  UNDER_2_5
  BTTS_YES
  BTTS_NO
}

enum PredictionResult {
  WIN
  LOSS
  VOID
  PENDING
}
