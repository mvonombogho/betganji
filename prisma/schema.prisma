generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing Auth Models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bankroll      Bankroll?
  bets          PlacedBet[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Betting Models
model Bankroll {
  id             String           @id @default(cuid())
  userId         String           @unique
  user           User             @relation(fields: [userId], references: [id])
  initialCapital Float
  currentBalance Float
  currency       String           @default("USD")
  maxStakePerBet Float
  maxStakePerDay Float
  stakeUnit      String           @default("fixed") // "fixed" or "percentage"
  stopLoss       Float?
  targetProfit   Float?
  bettingSites   BettingSite[]
  history        BankrollHistory[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model BettingSite {
  id             String   @id @default(cuid())
  bankrollId     String
  bankroll       Bankroll @relation(fields: [bankrollId], references: [id])
  name           String
  currentBalance Float
  totalDeposited Float
  totalWithdrawn Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([bankrollId, name])
}

model PlacedBet {
  id             String    @id @default(cuid())
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  matchId        String
  type           String    // single, multiple, system
  selection      String
  odds           Float
  stake          Float
  potentialWin   Float
  status         String    // pending, won, lost, void
  bettingSite    String
  reasoning      String    @db.Text
  confidenceLevel Int
  result         String?
  profitLoss     Float?
  placedAt       DateTime  @default(now())
  settledAt      DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model BankrollHistory {
  id          String   @id @default(cuid())
  bankrollId  String
  bankroll    Bankroll @relation(fields: [bankrollId], references: [id])
  balance     Float
  change      Float
  reason      String
  createdAt   DateTime @default(now())
}