"use client";

import React from 'react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Separator } from '@/components/ui/separator';
import { AlertCircle, TrendingUp, TrendingDown, Brain, HelpCircle, DollarSign, ArrowRight, Eye } from 'lucide-react';
import { PredictionInsights, RecommendedBet, AnalysisFactor } from '@/types/prediction';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';

interface PredictionInsightsCardProps {
  insights: PredictionInsights;
  matchId?: string;
  className?: string;
  onLoadMore?: () => void;
}

export function PredictionInsightsCard({ 
  insights, 
  matchId,
  className = "",
  onLoadMore
}: PredictionInsightsCardProps) {
  const { factors, recommendedBets, riskLevel, confidenceScore, additionalNotes } = insights;

  // Get risk color
  const getRiskColor = () => {
    switch (riskLevel) {
      case 'LOW': return 'text-green-600';
      case 'MEDIUM': return 'text-amber-600';
      case 'HIGH': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  // Get confidence color
  const getConfidenceColor = () => {
    if (confidenceScore >= 75) return 'bg-green-500';
    if (confidenceScore >= 50) return 'bg-amber-500';
    return 'bg-red-500';
  };

  // Render factor impact
  const renderImpact = (impact: number) => {
    const absoluteImpact = Math.abs(impact);
    const isPositive = impact > 0;
    
    return (
      <div className="flex items-center">
        {isPositive ? (
          <TrendingUp className="mr-1 text-green-500" size={16} />
        ) : (
          <TrendingDown className="mr-1 text-red-500" size={16} />
        )}
        <div className="h-1.5 w-16 bg-gray-200 rounded-full overflow-hidden">
          <div 
            className={`h-full ${isPositive ? 'bg-green-500' : 'bg-red-500'}`} 
            style={{ width: `${absoluteImpact * 100}%` }}
          />
        </div>
      </div>
    );
  };

  return (
    <Card className={className}>
      <CardHeader>
        <div className="flex items-center justify-between mb-1">
          <div className="flex items-center gap-2">
            <Brain size={20} className="text-purple-500" />
            <CardTitle>AI Prediction Insights</CardTitle>
          </div>
          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <HelpCircle size={18} className="text-gray-400" />
              </TooltipTrigger>
              <TooltipContent>
                <p className="w-60 text-xs">
                  Insights provided by DeepSeek R1 AI based on match data, team statistics,
                  recent form, historical head-to-head, and current odds.
                </p>
              </TooltipContent>
            </Tooltip>
          </TooltipProvider>
        </div>
        <CardDescription>
          <span className={getRiskColor()}>
            {riskLevel} RISK
          </span> â€¢ Generated by DeepSeek R1
        </CardDescription>
      </CardHeader>

      <CardContent className="space-y-6">
        {/* Confidence Score */}
        <div>
          <div className="flex justify-between items-center mb-1">
            <h3 className="font-medium">Confidence Score</h3>
            <span className="font-bold">{confidenceScore}%</span>
          </div>
          <Progress value={confidenceScore} className={getConfidenceColor()} />
        </div>

        {/* Key Factors */}
        <div>
          <h3 className="font-medium mb-3">Key Factors</h3>
          <div className="space-y-3">
            {factors.map((factor, index) => (
              <div key={index} className="flex justify-between items-start">
                <div className="flex-1">
                  <p className="font-medium text-sm">{factor.name}</p>
                  {factor.description && (
                    <p className="text-xs text-gray-500 mt-0.5">{factor.description}</p>
                  )}
                </div>
                <div className="ml-4 flex-shrink-0 mt-0.5">
                  {renderImpact(factor.impact)}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Recommended Bets */}
        {recommendedBets && recommendedBets.length > 0 && (
          <div>
            <h3 className="font-medium mb-3">Recommended Bets</h3>
            <div className="space-y-3">
              {recommendedBets.map((bet, index) => (
                <div key={index} className="p-3 bg-blue-50 rounded-lg border border-blue-100">
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <span className="text-sm font-medium">{bet.market}</span>
                      <p className="text-lg font-bold text-blue-700">{bet.selection}</p>
                    </div>
                    <Badge variant="outline" className="bg-white">
                      {bet.odds.toFixed(2)}
                    </Badge>
                  </div>
                  <div className="flex justify-between items-center text-sm">
                    <div className="flex items-center gap-1 text-gray-600">
                      <DollarSign size={14} />
                      <span>Suggested stake: {bet.stake}%</span>
                    </div>
                    <Badge variant="outline" className="bg-blue-50">
                      {bet.confidence}% Conf.
                    </Badge>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Additional Notes */}
        {additionalNotes && (
          <div>
            <h3 className="font-medium mb-2">Additional Insights</h3>
            <div className="p-3 bg-gray-50 rounded-lg border border-gray-200">
              <p className="text-sm text-gray-700">{additionalNotes}</p>
            </div>
          </div>
        )}

        {/* Disclaimer */}
        <div className="pt-2">
          <Separator className="mb-4" />
          <div className="flex items-start gap-2">
            <AlertCircle size={16} className="text-amber-500 mt-0.5 flex-shrink-0" />
            <p className="text-xs text-gray-500">
              These insights are generated by AI and should be used as supplementary information.
              Always exercise your own judgment when making betting decisions.
            </p>
          </div>
        </div>
      </CardContent>

      {matchId && onLoadMore && (
        <CardFooter>
          <Button variant="outline" className="w-full flex gap-2" onClick={onLoadMore}>
            <Eye size={16} />
            <span>Detailed Analysis</span>
            <ArrowRight size={16} />
          </Button>
        </CardFooter>
      )}
    </Card>
  );
}
